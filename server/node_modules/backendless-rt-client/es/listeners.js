"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RTListeners = function () {
  function RTListeners() {
    _classCallCheck(this, RTListeners);

    this.subscriptions = {};
    this.simpleListeners = {};
  }

  _createClass(RTListeners, [{
    key: "addSubscription",
    value: function addSubscription(type, subscriberFn, _ref) {
      var _this = this;

      var callback = _ref.callback,
          onError = _ref.onError,
          parser = _ref.parser,
          params = _ref.params;

      var subscriptionsStack = this.subscriptions[type] = this.subscriptions[type] || [];

      var subscription = subscriberFn(_extends({}, params, this.getSubscriptionOptions()), {
        parser: parser,
        onData: callback,
        onError: onError,
        onStop: function onStop() {
          _this.subscriptions[type] = subscriptionsStack.filter(function (s) {
            return s.subscription !== subscription;
          });
        }
      });

      var subscriptionStore = {
        callback: callback,
        params: params,
        subscription: subscription,
        stop: function stop() {
          return subscription.stop();
        }
      };

      subscriptionsStack.push(subscriptionStore);

      return subscriptionStore;
    }
  }, {
    key: "getSubscriptionOptions",
    value: function getSubscriptionOptions() {
      return {};
    }
  }, {
    key: "stopSubscription",
    value: function stopSubscription(type, _ref2) {
      var callback = _ref2.callback,
          matcher = _ref2.matcher;

      var subscriptionsStack = this.subscriptions[type] = this.subscriptions[type] || [];

      if (matcher) {
        subscriptionsStack.forEach(function (subscriptionStore) {
          if (matcher(subscriptionStore)) {
            subscriptionStore.subscription.stop();
          }
        });
      } else {
        subscriptionsStack.forEach(function (subscriptionStore) {
          if (!callback || subscriptionStore.callback === callback) {
            subscriptionStore.subscription.stop();
          }
        });
      }
    }
  }, {
    key: "addSimpleListener",
    value: function addSimpleListener(type, callback) {
      var listenersStack = this.simpleListeners[type] = this.simpleListeners[type] || [];

      listenersStack.push(callback);
    }
  }, {
    key: "removeSimpleListener",
    value: function removeSimpleListener(type, callback) {
      if (this.simpleListeners[type]) {
        this.simpleListeners[type] = callback ? this.simpleListeners[type].filter(function (cb) {
          return cb !== callback;
        }) : [];
      }
    }
  }, {
    key: "runSimpleListeners",
    value: function runSimpleListeners(type) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (this.simpleListeners[type]) {
        this.simpleListeners[type].forEach(function (callback) {
          return callback.apply(undefined, args);
        });
      }
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners() {
      var _this2 = this;

      Object.keys(this.subscriptions).forEach(function (listenerType) {
        _this2.subscriptions[listenerType].forEach(function (_ref3) {
          var subscription = _ref3.subscription;
          return subscription.stop();
        });
      });

      this.simpleListeners = {};
    }
  }]);

  return RTListeners;
}();

exports.default = RTListeners;
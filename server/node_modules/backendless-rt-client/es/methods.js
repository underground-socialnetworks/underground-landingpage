'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require('./constants');

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var method = function method(type) {
  return function (data) {
    return this.send(type, data);
  };
};

var RTMethods = function () {
  function RTMethods(_ref) {
    var _this = this;

    var onMessage = _ref.onMessage,
        emitMessage = _ref.emitMessage;

    _classCallCheck(this, RTMethods);

    this.onResponse = function (_ref2) {
      var id = _ref2.id,
          error = _ref2.error,
          result = _ref2.result;

      if (_this.invocations[id]) {
        var invocation = _this.invocations[id];

        if (error) {
          invocation.reject(error);
        } else {
          invocation.resolve(result);
        }

        delete _this.invocations[id];
      }
    };

    this.setUserToken = method(_constants.RTMethodTypes.SET_USER_TOKEN).bind(this);
    this.sendPubSubCommand = method(_constants.RTMethodTypes.PUB_SUB_COMMAND).bind(this);
    this.getRSO = method(_constants.RTMethodTypes.RSO_GET).bind(this);
    this.setRSO = method(_constants.RTMethodTypes.RSO_SET).bind(this);
    this.clearRSO = method(_constants.RTMethodTypes.RSO_CLEAR).bind(this);
    this.sendRSOCommand = method(_constants.RTMethodTypes.RSO_COMMAND).bind(this);
    this.invokeRSOMethod = method(_constants.RTMethodTypes.RSO_INVOKE).bind(this);

    this.onMessage = onMessage;
    this.emitMessage = emitMessage;

    this.invocations = {};
  }

  _createClass(RTMethods, [{
    key: 'initialize',
    value: function initialize() {
      this.onMessage(_constants.RTSocketEvents.MET_RES, this.onResponse);
    }
  }, {
    key: 'stop',
    value: function stop() {}
  }, {
    key: 'reset',
    value: function reset() {
      this.invocations = {};
    }
  }, {
    key: 'hasActivity',
    value: function hasActivity() {
      return !!Object.keys(this.invocations).length;
    }
  }, {
    key: 'send',


    //----------- RSO METHODS ---------//
    //---------------------------------//
    value: function send(name, options) {
      var _this2 = this;

      var methodId = _utils2.default.generateUID();
      var methodData = { id: methodId, name: name, options: options };

      this.emitMessage(_constants.RTSocketEvents.MET_REQ, methodData);

      return new Promise(function (resolve, reject) {
        _this2.invocations[methodId] = { resolve: resolve, reject: reject };
      });
    }

    //---------------------------------//
    //----------- AUTH METHODS --------//

    //----------- AUTH METHODS --------//
    //---------------------------------//

    //---------------------------------//
    //-------- PUB_SUB METHODS --------//

    //-------- PUB_SUB METHODS --------//
    //---------------------------------//

    //---------------------------------//
    //----------- RSO METHODS ---------//

  }]);

  return RTMethods;
}();

exports.default = RTMethods;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _dec2, _dec3, _dec4, _dec5, _desc, _value, _class, _class2, _temp;

var _listeners = require('./listeners');

var _listeners2 = _interopRequireDefault(_listeners);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

var ListenerTypes = {
  CONNECT: 'CONNECT',
  ERROR: 'ERROR',
  COMMAND: 'COMMAND',
  USER_STATUS: 'USER_STATUS'
};

var RTScopeConnector = (_dec = connectionRequired(), _dec2 = connectionRequired(), _dec3 = connectionRequired(), _dec4 = connectionRequired(), _dec5 = connectionRequired(true), (_class = (_temp = _class2 = function (_RTListeners) {
  _inherits(RTScopeConnector, _RTListeners);

  _createClass(RTScopeConnector, [{
    key: 'connectSubscriber',


    /**
     * @abstract getter, must be overridden in an inherited class
     * must returns a function for adding subscriptions to CONNECT to connection scope
     * For ex.: RTProvider.subscriptions.connectToRSO
     **/
    get: function get() {
      return null;
    }

    /**
     * @abstract getter, must be overridden in an inherited class
     *
     * must returns a function for adding subscriptions to listening COMMANDS in connection scope
     * For ex.: RTProvider.subscriptions.onRSOCommand
     **/


    /**
     * @static
     * @function
     * @decorator
     * @param {Boolean} [returnPromise] - if passed to TRUE the method returns a Promise
     *                                    and will be resolved when the instance is connected to scope
     *                                    and method return any result
     *
     * decorate instance's methods of the Class
     * puts the method's execution to pool and run it immediately after connected to Connection Scope.
     * if the instance is already connected to the scope the method will be executed immediately
     **/

  }, {
    key: 'commandSubscriber',
    get: function get() {
      return null;
    }

    /**
     * @abstract getter, must be overridden in an inherited class
     *
     * must returns a function for adding subscriptions to listening changes of USER_STATUS in connection scope
     * For ex.: RTProvider.subscriptions.onRSOUserStatus
     **/

  }, {
    key: 'usersSubscriber',
    get: function get() {
      return null;
    }

    /**
     * @abstract getter, must be overridden in an inherited class
     *
     * must returns a function for sending COMMAND into connection scope
     * For ex.: RTProvider.methods.sendRSOCommand
     **/

  }, {
    key: 'commandSender',
    get: function get() {
      return null;
    }
  }]);

  function RTScopeConnector(options) {
    _classCallCheck(this, RTScopeConnector);

    var _this = _possibleConstructorReturn(this, (RTScopeConnector.__proto__ || Object.getPrototypeOf(RTScopeConnector)).call(this));

    _this.options = options;

    _this.waitConnection = [];

    _this.connect();
    return _this;
  }

  /**
   * @public method
   *
   * connect to connection scope, if you already connected the method do nothing
   **/


  _createClass(RTScopeConnector, [{
    key: 'connect',
    value: function connect() {
      var _this2 = this;

      if (!this.isConnected()) {
        this.connection = this.connectSubscriber(this.getScopeOptions(), {
          onError: function onError(error) {
            return _this2.onError(error);
          },
          onReady: function onReady() {
            return _this2.onConnect();
          },
          onStop: function onStop() {
            return _this2.onDisconnect();
          }
        });
      }
    }

    /**
     * @public method
     *
     * disconnect from connection scope, if you already disconnect the method do nothing
     **/

  }, {
    key: 'disconnect',
    value: function disconnect() {
      if (this.isConnected()) {
        this.connection.stop();
      }
    }

    /**
     * @public method
     *
     * returns TRUE if you connected to connection scope otherwise returns FALSE
     **/

  }, {
    key: 'isConnected',
    value: function isConnected() {
      return !!this.connection && this.connection.isReady();
    }

    /**
     * @private method
     **/

  }, {
    key: 'getSubscriptionOptions',
    value: function getSubscriptionOptions() {
      return this.getScopeOptions();
    }

    /**
     * @private method
     **/

  }, {
    key: 'getScopeOptions',
    value: function getScopeOptions() {
      return this.options;
    }

    /**
     * @private method
     **/

  }, {
    key: 'onConnect',
    value: function onConnect() {
      this.waitConnection.forEach(function (operation) {
        return operation();
      });
      this.waitConnection = [];

      this.runSimpleListeners(ListenerTypes.CONNECT);
    }

    /**
     * @private method
     **/

  }, {
    key: 'onError',
    value: function onError(error) {
      this.runSimpleListeners(ListenerTypes.ERROR, error);
    }

    /**
     * @private method
     **/

  }, {
    key: 'onDisconnect',
    value: function onDisconnect() {
      this.connection = null;
    }

    /**
     * @public method
     **/

  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners() {
      this.waitConnection = [];

      _get(RTScopeConnector.prototype.__proto__ || Object.getPrototypeOf(RTScopeConnector.prototype), 'removeAllListeners', this).call(this);

      return this;
    }

    /**
     * @public method
     **/

  }, {
    key: 'addConnectListener',
    value: function addConnectListener(callback, onError) {
      this.addSimpleListener(ListenerTypes.CONNECT, callback);

      if (onError) {
        this.addSimpleListener(ListenerTypes.ERROR, onError);
      }

      return this;
    }

    /**
     * @public method
     **/

  }, {
    key: 'removeConnectListeners',
    value: function removeConnectListeners(callback, onError) {
      this.removeSimpleListener(ListenerTypes.CONNECT, callback);

      if (onError) {
        this.removeSimpleListener(ListenerTypes.ERROR, onError);
      }

      return this;
    }

    /**
     * @public method
     **/

  }, {
    key: 'addCommandListener',
    value: function addCommandListener(callback, onError) {
      this.addSubscription(ListenerTypes.COMMAND, this.commandSubscriber, { callback: callback, onError: onError });

      return this;
    }

    /**
     * @public method
     **/

  }, {
    key: 'removeCommandListeners',
    value: function removeCommandListeners(callback) {
      this.stopSubscription(ListenerTypes.COMMAND, { callback: callback });

      return this;
    }

    /**
     * @public method
     **/

  }, {
    key: 'addUserStatusListener',
    value: function addUserStatusListener(callback, onError) {
      this.addSubscription(ListenerTypes.USER_STATUS, this.usersSubscriber, { callback: callback, onError: onError });

      return this;
    }

    /**
     * @public method
     **/

  }, {
    key: 'removeUserStatusListeners',
    value: function removeUserStatusListeners(callback) {
      this.stopSubscription(ListenerTypes.USER_STATUS, { callback: callback });

      return this;
    }

    /**
     * @public method
     **/

  }, {
    key: 'send',
    value: function send(type, data) {
      return this.commandSender(_extends({}, this.getScopeOptions(), { type: type, data: data }));
    }
  }]);

  return RTScopeConnector;
}(_listeners2.default), _class2.connectionRequired = connectionRequired, _temp), (_applyDecoratedDescriptor(_class.prototype, 'addCommandListener', [_dec], Object.getOwnPropertyDescriptor(_class.prototype, 'addCommandListener'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'removeCommandListeners', [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, 'removeCommandListeners'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'addUserStatusListener', [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, 'addUserStatusListener'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'removeUserStatusListeners', [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, 'removeUserStatusListeners'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'send', [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, 'send'), _class.prototype)), _class));
exports.default = RTScopeConnector;


function connectionRequired(returnPromise) {
  return function (target, key, descriptor) {
    var decorated = descriptor.value;

    descriptor.value = function () {
      var _this3 = this,
          _arguments = arguments;

      var run = function run() {
        return decorated.apply(_this3, _arguments);
      };

      if (this.isConnected()) {
        return run();
      }

      if (returnPromise) {
        return new Promise(function (resolve, reject) {
          return _this3.waitConnection.push(function () {
            return run().then(resolve, reject);
          });
        });
      }

      this.waitConnection.push(run);

      return this;
    };

    return descriptor;
  };
}
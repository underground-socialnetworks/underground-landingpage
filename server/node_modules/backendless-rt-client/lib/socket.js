'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require('./constants');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RTSocket = function () {
  _createClass(RTSocket, null, [{
    key: 'connect',
    value: function connect(config, onDisconnect) {
      var Request = require('backendless-request');

      if (!config.lookupPath) {
        throw new Error('config.lookupPath is not configured');
      }

      return Request.get(config.lookupPath).set(config.lookupHeaders).then(function (rtServerHost) {
        return new Promise(function (resolve, reject) {
          var rtSocket = new RTSocket(config, rtServerHost);

          rtSocket.on(_constants.NativeSocketEvents.CONNECT, onConnect);
          rtSocket.on(_constants.NativeSocketEvents.CONNECT_ERROR, onError);
          rtSocket.on(_constants.NativeSocketEvents.CONNECT_TIMEOUT, onError);
          rtSocket.on(_constants.NativeSocketEvents.ERROR, onError);

          rtSocket.connect();

          function onConnect() {
            resolve(rtSocket);
          }

          function onError(error) {
            rtSocket.close();

            reject(error);
          }
        });
      }).then(function (rtSocket) {
        rtSocket.on(_constants.NativeSocketEvents.DISCONNECT, onDisconnect);

        return rtSocket;
      });
    }
  }]);

  function RTSocket(config, host) {
    _classCallCheck(this, RTSocket);

    var io = require('socket.io-client');

    this.config = config;

    this.events = {};

    if (!config.appId) {
      throw new Error('config.appId is not configured');
    }

    this.ioSocket = io(host + '/' + this.config.appId, {
      forceNew: true,
      autoConnect: false,
      reconnection: false,
      path: '/' + this.config.appId,
      query: this.config.getConnectQuery()
    });
  }

  _createClass(RTSocket, [{
    key: 'connect',
    value: function connect() {
      this.ioSocket.connect();
    }
  }, {
    key: 'close',
    value: function close() {
      this.events = {};
      this.ioSocket.off();
      this.ioSocket.close();
    }
  }, {
    key: 'on',
    value: function on(event, callback) {
      var _this = this;

      if (!this.events[event]) {
        this.ioSocket.on(event, function (data) {
          return _this.onEvent(event, data);
        });
      }

      this.events[event] = this.events[event] || [];
      this.events[event].push(callback);
    }
  }, {
    key: 'off',
    value: function off(event, callback) {
      this.events[event] = callback ? this.events[event].filter(function (f) {
        return f !== callback;
      }) : [];

      if (!this.events[event].length) {
        delete this.events[event];
      }

      if (!this.events[event]) {
        this.ioSocket.off(event);
      }
    }
  }, {
    key: 'onEvent',
    value: function onEvent(event, data) {
      if (this.config.debugMode) {
        logMessage('FROM SERVER', event, data);
      }

      if (this.events[event]) {
        this.events[event].forEach(function (callback) {
          return callback(data);
        });
      }
    }
  }, {
    key: 'emit',
    value: function emit(event, data) {
      if (this.config.debugMode) {
        logMessage('TO SERVER', event, data);
      }

      this.ioSocket.emit(event, data);
    }
  }]);

  return RTSocket;
}();

exports.default = RTSocket;


function logMessage(type, event, data) {
  console.log('[' + type + '] - [event: ' + event + '] - arguments: ' + JSON.stringify(data) + ' ');
}
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require('./constants');

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var subscription = function subscription(type) {
  return function (options, callbacks) {
    return this.subscribe(type, options, callbacks);
  };
};

var RTSubscriptions = function () {
  function RTSubscriptions(_ref) {
    var onMessage = _ref.onMessage,
        emitMessage = _ref.emitMessage;

    _classCallCheck(this, RTSubscriptions);

    this.onObjectsChanges = subscription(_constants.RTSubscriptionTypes.OBJECTS_CHANGES).bind(this);
    this.connectToPubSub = subscription(_constants.RTSubscriptionTypes.PUB_SUB_CONNECT).bind(this);
    this.onPubSubMessage = subscription(_constants.RTSubscriptionTypes.PUB_SUB_MESSAGES).bind(this);
    this.onPubSubCommand = subscription(_constants.RTSubscriptionTypes.PUB_SUB_COMMANDS).bind(this);
    this.onPubSubUserStatus = subscription(_constants.RTSubscriptionTypes.PUB_SUB_USERS).bind(this);
    this.connectToRSO = subscription(_constants.RTSubscriptionTypes.RSO_CONNECT).bind(this);
    this.onRSOChanges = subscription(_constants.RTSubscriptionTypes.RSO_CHANGES).bind(this);
    this.onRSOClear = subscription(_constants.RTSubscriptionTypes.RSO_CLEARED).bind(this);
    this.onRSOCommand = subscription(_constants.RTSubscriptionTypes.RSO_COMMANDS).bind(this);
    this.onRSOInvoke = subscription(_constants.RTSubscriptionTypes.RSO_INVOKE).bind(this);
    this.onRSOUserStatus = subscription(_constants.RTSubscriptionTypes.RSO_USERS).bind(this);
    this.onLoggingMessages = subscription(_constants.RTSubscriptionTypes.LOGGING_MESSAGES).bind(this);

    this.onMessage = onMessage;
    this.emitMessage = emitMessage;

    this.subscriptions = {};
  }

  _createClass(RTSubscriptions, [{
    key: 'initialize',
    value: function initialize() {
      var _this = this;

      this.onMessage(_constants.RTSocketEvents.SUB_RES, function (data) {
        return _this.onSubscriptionResponse(data);
      });
    }
  }, {
    key: 'stop',
    value: function stop() {
      var _this2 = this;

      Object.keys(this.subscriptions).forEach(function (subscriptionId) {
        _this2.subscriptions[subscriptionId].ready = false;
      });
    }
  }, {
    key: 'reset',
    value: function reset() {
      var _this3 = this;

      Object.keys(this.subscriptions).forEach(function (subscriptionId) {
        return _this3.stopSubscription(subscriptionId);
      });
    }
  }, {
    key: 'restore',
    value: function restore() {
      var _this4 = this;

      Object.keys(this.subscriptions).forEach(function (subscriptionId) {
        _this4.startSubscription(subscriptionId);
      });
    }
  }, {
    key: 'hasActivity',
    value: function hasActivity() {
      return !!Object.keys(this.subscriptions).length;
    }
  }, {
    key: 'subscribe',
    value: function subscribe(name, options, _ref2) {
      var _this5 = this;

      var parser = _ref2.parser,
          onData = _ref2.onData,
          onError = _ref2.onError,
          onStop = _ref2.onStop,
          onReady = _ref2.onReady;

      var subscriptionId = _utils2.default.generateUID();

      this.subscriptions[subscriptionId] = {
        data: { id: subscriptionId, name: name, options: options },
        ready: false,
        parser: parser,
        onData: onData,
        onError: onError,
        onStop: onStop,
        onReady: onReady
      };

      this.startSubscription(subscriptionId);

      return {
        isReady: function isReady() {
          return !!_this5.subscriptions[subscriptionId] && _this5.subscriptions[subscriptionId].ready;
        },

        stop: function stop() {
          if (_this5.subscriptions[subscriptionId]) {
            _this5.offSubscription(subscriptionId);
          }
        }
      };
    }
  }, {
    key: 'startSubscription',
    value: function startSubscription(subscriptionId) {
      var subscription = this.subscriptions[subscriptionId];

      this.emitMessage(_constants.RTSocketEvents.SUB_ON, subscription.data);
    }
  }, {
    key: 'stopSubscription',
    value: function stopSubscription(subscriptionId) {
      var subscription = this.subscriptions[subscriptionId];

      if (subscription) {
        if (subscription.onStop) {
          subscription.onStop();
        }

        delete this.subscriptions[subscriptionId];
      }
    }
  }, {
    key: 'offSubscription',
    value: function offSubscription(subscriptionId) {
      var subscription = this.subscriptions[subscriptionId];

      if (subscription) {
        this.emitMessage(_constants.RTSocketEvents.SUB_OFF, { id: subscriptionId });

        this.stopSubscription(subscriptionId);
      }
    }
  }, {
    key: 'onSubscriptionResponse',

    /***** LOGGING SUBSCRIPTIONS ****** **/
    /***************************************** **/

    /** CONSOLE's SUBSCRIPTIONS **************************************************** **/
    /******************************************************************************* **/
    /******************************************************************************* **/
    value: function onSubscriptionResponse(_ref3) {
      var id = _ref3.id,
          data = _ref3.data,
          error = _ref3.error;

      var subscription = this.subscriptions[id];

      if (subscription) {
        if (error) {

          if (subscription.onError) {
            subscription.onError(error);
          }

          this.stopSubscription(id);
        } else {
          if (!subscription.ready) {
            subscription.ready = true;

            if (subscription.onReady) {
              subscription.onReady();
            }
          }

          if (subscription.onData) {
            if (typeof subscription.parser === 'function') {
              data = subscription.parser(data);
            }

            subscription.onData(data);
          }
        }
      }
    }

    /******************************************************************************* **/
    /******************************************************************************* **/
    /** COMMON SUBSCRIPTIONS ******************************************************** **/

    /***************************************** **/
    /***** DATA SUBSCRIPTIONS **************** **/
    /** */
    /***** DATA SUBSCRIPTIONS **************** **/
    /***************************************** **/

    /***************************************** **/
    /***** PUB_SUB SUBSCRIPTIONS ************* **/
    /** */
    /** */
    /** */
    /** */
    /***** PUB_SUB SUBSCRIPTIONS ************* **/
    /***************************************** **/

    /***************************************** **/
    /***** RSO SUBSCRIPTIONS ***************** **/
    /** */
    /** */
    /** */
    /** */
    /** */
    /** */
    /***** RSO SUBSCRIPTIONS ***************** **/
    /***************************************** **/

    /** COMMON SUBSCRIPTIONS ******************************************************** **/
    /******************************************************************************* **/
    /******************************************************************************* **/

    /******************************************************************************* **/
    /******************************************************************************* **/
    /** CONSOLE's SUBSCRIPTIONS **************************************************** **/

    /***************************************** **/
    /***** LOGGING SUBSCRIPTIONS ****** **/
    /** */
  }]);

  return RTSubscriptions;
}();

exports.default = RTSubscriptions;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GeoQuery = function () {
  function GeoQuery(args) {
    _classCallCheck(this, GeoQuery);

    args = args || {};

    this.searchRectangle = args.searchRectangle || undefined;
    this.categories = args.categories || [];
    this.includeMetadata = args.includeMetadata || true;
    this.metadata = args.metadata || undefined;
    this.condition = args.condition || undefined;
    this.relativeFindMetadata = args.relativeFindMetadata || undefined;
    this.relativeFindPercentThreshold = args.relativeFindPercentThreshold || undefined;
    this.pageSize = args.pageSize || undefined;
    this.latitude = args.latitude || undefined;
    this.longitude = args.longitude || undefined;
    this.radius = args.radius || undefined;
    this.units = args.units || undefined;
    this.degreePerPixel = args.degreePerPixel || undefined;
    this.clusterGridSize = args.clusterGridSize || undefined;
  }

  _createClass(GeoQuery, [{
    key: 'addCategory',
    value: function addCategory(category) {
      this.categories = this.categories || [];
      this.categories.push(category);
    }
  }, {
    key: 'setClusteringParams',
    value: function setClusteringParams(westLongitude, eastLongitude, mapWidth, clusterGridSize) {
      clusterGridSize = clusterGridSize || 0;

      var parsedWestLongitude = parseFloat(westLongitude);
      var parsedEastLongitude = parseFloat(eastLongitude);
      var parsedMapWidth = parseInt(mapWidth);
      var parsedClusterGridSize = parseInt(clusterGridSize);

      if (!isFinite(parsedWestLongitude) || parsedWestLongitude < -180 || parsedWestLongitude > 180) {
        throw new Error('The westLongitude value must be a number in the range between -180 and 180');
      }

      if (!isFinite(parsedEastLongitude) || parsedEastLongitude < -180 || parsedEastLongitude > 180) {
        throw new Error('The eastLongitude value must be a number in the range between -180 and 180');
      }

      if (!isFinite(parsedMapWidth) || parsedMapWidth < 1) {
        throw new Error('The mapWidth value must be a number greater or equal to 1');
      }

      if (!isFinite(parsedClusterGridSize) || parsedClusterGridSize < 0) {
        throw new Error('The clusterGridSize value must be a number greater or equal to 0');
      }

      var longDiff = parsedEastLongitude - parsedWestLongitude;

      if (longDiff < 0) {
        longDiff += 360;
      }

      this.degreePerPixel = longDiff / parsedMapWidth;
      this.clusterGridSize = parsedClusterGridSize || null;
    }
  }]);

  return GeoQuery;
}();

exports.default = GeoQuery;
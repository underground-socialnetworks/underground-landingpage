'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.parseFindResponse = parseFindResponse;

var _utils = require('../../utils');

var _utils2 = _interopRequireDefault(_utils);

var _utils3 = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isObject(item) {
  return (typeof item === 'undefined' ? 'undefined' : _typeof(item)) === 'object' && item !== null;
}

function parseCircularDependencies(obj) {
  var result = new obj.constructor();
  var subIds = {};
  var postAssign = [];
  var iteratedItems = [];

  function ensureCircularDep(source, target, prop) {
    if (subIds[source[prop].__originSubID]) {
      target[prop] = subIds[source[prop].__originSubID];
    } else {
      postAssign.push([target, prop, source[prop].__originSubID]);
    }
  }

  function processModel(source, target, prop) {
    var Model = source[prop].constructor;

    target[prop] = new Model();

    if (source[prop].__subID) {
      subIds[source[prop].__subID] = target[prop];
      delete source[prop].__subID;
    }
  }

  function buildCircularDeps(source, target) {
    if (iteratedItems.indexOf(source) === -1) {
      iteratedItems.push(source);

      for (var prop in source) {
        if (source.hasOwnProperty(prop)) {
          if (Array.isArray(source[prop])) {
            buildCircularDeps(source[prop], target[prop] = []);
          } else if (isObject(source[prop])) {
            if (source[prop].__originSubID) {
              ensureCircularDep(source, target, prop);
            } else {
              processModel(source, target, prop);

              buildCircularDeps(source[prop], target[prop]);
            }
          } else {
            target[prop] = source[prop];
          }
        }
      }
    }
  }

  buildCircularDeps(obj, result);

  postAssign.forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 3),
        target = _ref2[0],
        prop = _ref2[1],
        __originSubID = _ref2[2];

    return target[prop] = subIds[__originSubID];
  });

  return result;
}

function parseFindResponse(response, Model) {
  var sanitizeResponseItem = function sanitizeResponseItem(resp) {
    Model = _utils2.default.isFunction(Model) ? Model : (0, _utils3.resolveModelClassFromString)(resp.___class);

    return _utils2.default.deepExtend(new Model(), resp.fields || resp);
  };

  var result = _utils2.default.isArray(response) ? response.map(sanitizeResponseItem) : sanitizeResponseItem(response);

  return parseCircularDependencies(result);
}
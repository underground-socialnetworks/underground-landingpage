'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _backendlessRequest = require('backendless-request');

var _backendlessRequest2 = _interopRequireDefault(_backendlessRequest);

var _localVars = require('./local-vars');

var _localVars2 = _interopRequireDefault(_localVars);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var root = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) === 'object' && self.self === self && self || (typeof global === 'undefined' ? 'undefined' : _typeof(global)) === 'object' && global.global === global && global;

var previousBackendless = root && root.Backendless;

var Backendless = {

  get debugMode() {
    return _localVars2.default.debugMode;
  },

  set debugMode(debugMode) {
    _localVars2.default.debugMode = !!debugMode;

    require('./rt').setRTDebugMode(_localVars2.default.debugMode);
  },

  get serverURL() {
    return _localVars2.default.serverURL;
  },

  set serverURL(serverURL) {
    _localVars2.default.serverURL = serverURL;
  },

  get XMLHttpRequest() {
    return _localVars2.default.XMLHttpRequest;
  },

  set XMLHttpRequest(XMLHttpRequest) {
    _localVars2.default.XMLHttpRequest = XMLHttpRequest;
  },

  get applicationId() {
    return _localVars2.default.applicationId;
  },

  set applicationId(appId) {
    throw new Error('Setting \'' + appId + '\' value to Backendless.applicationId directly is not possible, ' + ('instead you must use Backendless.initApp(\'' + appId + '\', API_KEY)'));
  },

  get secretKey() {
    return _localVars2.default.secretKey;
  },

  set secretKey(apiKey) {
    throw new Error('Setting \'' + apiKey + '\' value to Backendless.secretKey directly is not possible, ' + ('instead you must use Backendless.initApp(APP_ID, \'' + apiKey + '\')'));
  },

  get appPath() {
    return _localVars2.default.appPath;
  },

  set appPath(appPath) {
    throw new Error('Setting \'' + appPath + '\' value to Backendless.appPath directly is not possible, ' + 'instead you must use Backendless.initApp(APP_ID, API_KEY) for setup the value');
  },

  get ServerCode() {
    return _localVars2.default.ServerCode;
  },

  set ServerCode(ServerCode) {
    _localVars2.default.ServerCode = ServerCode;
  },

  initApp: function initApp() {
    var _require;

    (_require = require('./init-app')).initApp.apply(_require, arguments);
  },
  getCurrentUserToken: function getCurrentUserToken() {
    return require('./users/current-user').getCurrentUserToken();
  },
  setupDevice: function setupDevice() {
    var _require2 = require('./device'),
        Device = _require2.default;

    Device.setup.apply(Device, arguments);
  },


  get browser() {
    return require('./user-agent').getUserAgent();
  },

  Request: _backendlessRequest2.default,

  noConflict: function noConflict() {
    if (root) {
      root.Backendless = previousBackendless;
    }

    return Backendless;
  },


  ///-------------------------------------///
  ///-------------- SERVICES -------------///

  get Logging() {
    return require('./logging').default;
  },

  get Counters() {
    return require('./counters').default;
  },

  get Cache() {
    return require('./cache').default;
  },

  get Commerce() {
    return require('./commerce').default;
  },

  get Users() {
    return require('./users').default;
  },

  get User() {
    return require('./users/user').default;
  },

  get CustomServices() {
    return require('./bl/custom-services').default;
  },

  get Events() {
    return require('./bl/events').default;
  },

  get Geo() {
    return require('./geo').default;
  },

  get Data() {
    return require('./data').default;
  },

  get Messaging() {
    return require('./messaging').default;
  },

  get Files() {
    return require('./files').default;
  },

  get RT() {
    return require('./rt').default;
  },

  get SharedObject() {
    return require('./rso').default;
  },

  ///-------------- SERVICES -------------///
  ///-------------------------------------///

  ///-------------------------------------///
  ///--------BACKWARD COMPATIBILITY-------///

  //TODO: do we need to remove it?

  get UserService() {
    return Backendless.Users;
  },

  get GeoQuery() {
    return Backendless.Geo.Query;
  },

  get GeoPoint() {
    return Backendless.Geo.Point;
  },

  get GeoCluster() {
    return Backendless.Geo.Cluster;
  },

  get Persistence() {
    return Backendless.Data;
  },

  get DataQueryBuilder() {
    return Backendless.Data.QueryBuilder;
  },

  get LoadRelationsQueryBuilder() {
    return Backendless.Data.LoadRelationsQueryBuilder;
  },

  get Bodyparts() {
    return Backendless.Messaging.Bodyparts;
  },

  get PublishOptions() {
    return Backendless.Messaging.PublishOptions;
  },

  get DeliveryOptions() {
    return Backendless.Messaging.DeliveryOptions;
  },

  get PublishOptionsHeaders() {
    return Backendless.Messaging.PublishOptionsHeaders;
  },

  get LocalCache() {
    return require('./local-cache').default;
  },

  /** @deprecated */
  get SubscriptionOptions() {
    return Backendless.Messaging.SubscriptionOptions;
  }

};

if (root) {
  root.Backendless = Backendless;
}

exports.default = Backendless;


module.exports = Backendless;
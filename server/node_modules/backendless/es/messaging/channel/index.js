'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _dec, _dec2, _dec3, _dec4, _desc, _value, _class;

var _utils = require('../../utils');

var _utils2 = _interopRequireDefault(_utils);

var _rt = require('../../rt');

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

var ListenerTypes = _utils2.default.mirrorKeys({
  MESSAGE: null
});

var Channel = (_dec = (0, _rt.disallowInBusinessLogic)('MessagingChannel.addMessageListener'), _dec2 = _rt.RTScopeConnector.connectionRequired(), _dec3 = (0, _rt.disallowInBusinessLogic)('MessagingChannel.addCommandListener'), _dec4 = (0, _rt.disallowInBusinessLogic)('MessagingChannel.addUserStatusListener'), (_class = function (_RTScopeConnector) {
  _inherits(Channel, _RTScopeConnector);

  function Channel() {
    _classCallCheck(this, Channel);

    return _possibleConstructorReturn(this, (Channel.__proto__ || Object.getPrototypeOf(Channel)).apply(this, arguments));
  }

  _createClass(Channel, [{
    key: 'getScopeOptions',
    value: function getScopeOptions() {
      var name = this.options.name;


      return {
        channel: name
      };
    }
  }, {
    key: 'publish',
    value: function publish(message, publishOptions, deliveryTarget) {
      return _index2.default.publish(this.options.name, message, publishOptions, deliveryTarget);
    }
  }, {
    key: 'addMessageListener',
    value: function addMessageListener(selector, callback, onError) {
      if (typeof selector === 'function') {
        onError = callback;
        callback = selector;
        selector = undefined;
      }

      this.addSubscription(ListenerTypes.MESSAGE, _rt.RTClient.subscriptions.onPubSubMessage, {
        callback: callback,
        onError: onError,
        params: {
          selector: selector
        }
      });
    }
  }, {
    key: 'removeMessageListener',
    value: function removeMessageListener(selector, callback) {
      if (typeof selector === 'function') {
        callback = selector;
        selector = undefined;
      }

      if (selector && typeof selector !== 'string') {
        throw new Error('"selector" must be string');
      }

      if (typeof callback !== 'function') {
        throw new Error('"callback" must be function');
      }

      var matcher = function matcher(subscription) {
        var params = subscription.params;

        if (selector) {
          return params.selector === selector && params.callback === callback;
        }

        return subscription.callback === callback;
      };

      this.stopSubscription(ListenerTypes.MESSAGE, { matcher: matcher });
    }
  }, {
    key: 'removeMessageListeners',
    value: function removeMessageListeners(selector) {
      if (typeof selector !== 'string') {
        throw new Error('"selector" must be string');
      }

      var matcher = function matcher(subscription) {
        return subscription.params.selector === selector;
      };

      this.stopSubscription(ListenerTypes.MESSAGE, { matcher: matcher });
    }
  }, {
    key: 'removeAllMessageListeners',
    value: function removeAllMessageListeners() {
      this.stopSubscription(ListenerTypes.MESSAGE, {});
    }
  }, {
    key: 'addCommandListener',
    value: function addCommandListener() {
      return _get(Channel.prototype.__proto__ || Object.getPrototypeOf(Channel.prototype), 'addCommandListener', this).apply(this, arguments);
    }
  }, {
    key: 'addUserStatusListener',
    value: function addUserStatusListener() {
      return _get(Channel.prototype.__proto__ || Object.getPrototypeOf(Channel.prototype), 'addUserStatusListener', this).apply(this, arguments);
    }
  }, {
    key: 'join',
    value: function join() {
      _get(Channel.prototype.__proto__ || Object.getPrototypeOf(Channel.prototype), 'connect', this).call(this);
    }
  }, {
    key: 'leave',
    value: function leave() {
      _get(Channel.prototype.__proto__ || Object.getPrototypeOf(Channel.prototype), 'disconnect', this).call(this);
    }
  }, {
    key: 'isJoined',
    value: function isJoined() {
      return _get(Channel.prototype.__proto__ || Object.getPrototypeOf(Channel.prototype), 'isConnected', this).call(this);
    }
  }, {
    key: 'connectSubscriber',
    get: function get() {
      return _rt.RTClient.subscriptions.connectToPubSub;
    }
  }, {
    key: 'usersSubscriber',
    get: function get() {
      return _rt.RTClient.subscriptions.onPubSubUserStatus;
    }
  }, {
    key: 'commandSubscriber',
    get: function get() {
      return _rt.RTClient.subscriptions.onPubSubCommand;
    }
  }, {
    key: 'commandSender',
    get: function get() {
      return _rt.RTClient.methods.sendPubSubCommand;
    }
  }]);

  return Channel;
}(_rt.RTScopeConnector), (_applyDecoratedDescriptor(_class.prototype, 'addMessageListener', [_dec, _dec2], Object.getOwnPropertyDescriptor(_class.prototype, 'addMessageListener'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'addCommandListener', [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, 'addCommandListener'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'addUserStatusListener', [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, 'addUserStatusListener'), _class.prototype)), _class));
exports.default = Channel;
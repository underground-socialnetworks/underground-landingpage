'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _utils = require('../utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//TODO: refactor me

function setCache() {
  var store = {};
  var storage = {};

  store.enabled = false;

  store.exists = function (key) {
    return store.get(key) !== undefined;
  };

  store.set = function (key, value) {
    return storage[key] = store.serialize(value);
  };

  store.get = function (key) {
    var result = storage[key];

    return result && store.deserialize(result);
  };

  store.remove = function (key) {
    return delete storage[key];
  };

  store.clear = function () {
    storage = {};
  };

  store.flushExpired = function () {};

  store.getCachePolicy = function () /** key */{};

  store.getAll = function () {
    var result = {};

    for (var prop in storage) {
      if (storage.hasOwnProperty(prop)) {
        result[prop] = storage[prop];
      }
    }

    return result;
  };

  store.serialize = function (value) {
    return JSON.stringify(value);
  };

  store.deserialize = function (value) {
    if (typeof value !== 'string') {
      return undefined;
    }
    try {
      return JSON.parse(value);
    } catch (e) {
      return value || undefined;
    }
  };

  function isLocalStorageSupported() {
    try {
      if (_utils2.default.isBrowser && window.localStorage) {
        localStorage.setItem('localStorageTest', true);
        localStorage.removeItem('localStorageTest');
        return true;
      } else {
        return false;
      }
    } catch (e) {
      return false;
    }
  }

  if (isLocalStorageSupported()) {
    return extendToLocalStorageCache(store);
  }

  return store;
}

function extendToLocalStorageCache(store) {
  var storage = window.localStorage;

  var createBndlsStorage = function createBndlsStorage() {
    if (!storage.getItem('Backendless')) {
      storage.setItem('Backendless', store.serialize({}));
    }
  };

  var expired = function expired(obj) {
    var result = false;

    if (obj && Object.prototype.toString.call(obj).slice(8, -1) === 'Object') {
      if ('cachePolicy' in obj && 'timeToLive' in obj.cachePolicy && obj.cachePolicy.timeToLive !== -1 && 'created' in obj.cachePolicy) {

        result = new Date().getTime() - obj['cachePolicy']['created'] > obj['cachePolicy']['timeToLive'];
      }
    }

    return result;
  };

  var addTimestamp = function addTimestamp(obj) {
    if (obj && Object.prototype.toString.call(obj).slice(8, -1) === 'Object') {
      if ('cachePolicy' in obj && 'timeToLive' in obj['cachePolicy']) {
        obj['cachePolicy']['created'] = new Date().getTime();
      }
    }
  };

  createBndlsStorage();

  store.enabled = true;

  store.exists = function (key) {
    return store.get(key) !== undefined;
  };

  store.set = function (key, val) {
    if (val === undefined) {
      return store.remove(key);
    }

    createBndlsStorage();

    var backendlessObj = store.deserialize(storage.getItem('Backendless'));

    addTimestamp(val);

    backendlessObj[key] = val;

    try {
      storage.setItem('Backendless', store.serialize(backendlessObj));
    } catch (e) {
      backendlessObj = {};
      backendlessObj[key] = val;
      storage.setItem('Backendless', store.serialize(backendlessObj));
    }

    return val;
  };

  store.get = function (key) {
    createBndlsStorage();

    var backendlessObj = store.deserialize(storage.getItem('Backendless'));
    var obj = backendlessObj[key];
    var result = obj;

    if (expired(obj)) {
      delete backendlessObj[key];
      storage.setItem('Backendless', store.serialize(backendlessObj));
      result = undefined;
    }

    if (result && result['cachePolicy']) {
      delete result['cachePolicy'];
    }

    return result;
  };

  store.remove = function (key) {
    var result = void 0;

    createBndlsStorage();

    key = key.replace(/([^A-Za-z0-9-])/g, '');

    var backendlessObj = store.deserialize(storage.getItem('Backendless'));

    if (backendlessObj.hasOwnProperty(key)) {
      result = delete backendlessObj[key];
    }

    storage.setItem('Backendless', store.serialize(backendlessObj));

    return result;
  };

  store.clear = function () {
    storage.setItem('Backendless', store.serialize({}));
  };

  store.getAll = function () {
    createBndlsStorage();

    var backendlessObj = store.deserialize(storage.getItem('Backendless'));
    var ret = {};

    for (var prop in backendlessObj) {
      if (backendlessObj.hasOwnProperty(prop)) {
        ret[prop] = backendlessObj[prop];
        if (ret[prop] !== null && ret[prop].hasOwnProperty('cachePolicy')) {
          delete ret[prop]['cachePolicy'];
        }
      }
    }

    return ret;
  };

  store.flushExpired = function () {
    createBndlsStorage();

    var backendlessObj = store.deserialize(storage.getItem('Backendless'));
    var obj = void 0;

    for (var prop in backendlessObj) {
      if (backendlessObj.hasOwnProperty(prop)) {
        obj = backendlessObj[prop];
        if (expired(obj)) {
          delete backendlessObj[prop];
          storage.setItem('Backendless', store.serialize(backendlessObj));
        }
      }
    }
  };

  store.getCachePolicy = function (key) {
    createBndlsStorage();

    var backendlessObj = store.deserialize(storage.getItem('Backendless'));
    var obj = backendlessObj[key];

    return obj ? obj['cachePolicy'] : undefined;
  };

  return store;
}

var LocalCache = setCache();

if (LocalCache.enabled) {
  LocalCache.flushExpired();
}

exports.default = LocalCache;
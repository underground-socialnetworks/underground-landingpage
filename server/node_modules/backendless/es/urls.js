'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _localVars = require('./local-vars');

var _localVars2 = _interopRequireDefault(_localVars);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Urls = {
  root: function root() {
    return _localVars2.default.appPath;
  },

  blServices: function blServices() {
    return Urls.root() + '/services';
  },
  blServiceMethod: function blServiceMethod(name, method) {
    return Urls.blServices() + '/' + name + '/' + method;
  },

  blEvent: function blEvent(eventName) {
    return Urls.root() + '/servercode/events/' + eventName;
  },

  logging: function logging() {
    return Urls.root() + '/log';
  },

  cache: function cache() {
    return Urls.root() + '/cache';
  },
  cacheItem: function cacheItem(key) {
    return Urls.cache() + '/' + key;
  },
  cacheItemExpireIn: function cacheItemExpireIn(key) {
    return Urls.cacheItem(key) + '/expireIn';
  },
  cacheItemExpireAt: function cacheItemExpireAt(key) {
    return Urls.cacheItem(key) + '/expireAt';
  },
  cacheItemCheck: function cacheItemCheck(key) {
    return Urls.cacheItem(key) + '/check';
  },

  counters: function counters() {
    return Urls.root() + '/counters';
  },
  counter: function counter(name) {
    return Urls.counters() + '/' + name;
  },
  counterAddAndGet: function counterAddAndGet(name) {
    return Urls.counter(name) + '/incrementby/get';
  },
  counterGetAndAdd: function counterGetAndAdd(name) {
    return Urls.counter(name) + '/get/incrementby';
  },
  counterIncrementAndGet: function counterIncrementAndGet(name) {
    return Urls.counter(name) + '/increment/get';
  },
  counterDecrementAndGet: function counterDecrementAndGet(name) {
    return Urls.counter(name) + '/decrement/get';
  },
  counterGetAndDecrement: function counterGetAndDecrement(name) {
    return Urls.counter(name) + '/get/decrement';
  },
  counterGetAndIncrement: function counterGetAndIncrement(name) {
    return Urls.counter(name) + '/get/increment';
  },
  counterCompareAndSet: function counterCompareAndSet(name) {
    return Urls.counter(name) + '/get/compareandset';
  },
  counterReset: function counterReset(name) {
    return Urls.counter(name) + '/reset';
  },

  data: function data() {
    return Urls.root() + '/data';
  },
  dataTable: function dataTable(tableName) {
    return Urls.data() + '/' + tableName;
  },
  dataTableObject: function dataTableObject(tableName, objectId) {
    return Urls.dataTable(tableName) + '/' + objectId;
  },
  dataTableObjectRelation: function dataTableObjectRelation(tableName, objectId, columnName) {
    return Urls.dataTableObject(tableName, objectId) + '/' + columnName;
  },
  dataTableCount: function dataTableCount(tableName) {
    return Urls.dataTable(tableName) + '/count';
  },
  dataTableProps: function dataTableProps(tableName) {
    return Urls.dataTable(tableName) + '/properties';
  },
  dataBulkTable: function dataBulkTable(tableName) {
    return Urls.data() + '/bulk/' + tableName;
  },
  dataObjectPermission: function dataObjectPermission(tableName, permissionType, objectId) {
    return Urls.dataTable(tableName) + '/permissions/' + permissionType + '/' + encodeURIComponent(objectId);
  },

  messaging: function messaging() {
    return Urls.root() + '/messaging';
  },
  messagingPush: function messagingPush() {
    return Urls.messaging() + '/push';
  },
  messagingPushTemplates: function messagingPushTemplates() {
    return Urls.messaging() + '/pushtemplates';
  },
  messagingPushWithTemplate: function messagingPushWithTemplate(templateName) {
    return Urls.messagingPush() + '/' + templateName;
  },
  messagingEmail: function messagingEmail() {
    return Urls.messaging() + '/email';
  },
  messagingChannel: function messagingChannel(channel) {
    return Urls.messaging() + '/' + channel;
  },
  messagingMessage: function messagingMessage(messageId) {
    return Urls.messaging() + '/' + messageId;
  },
  messagingRegistrations: function messagingRegistrations() {
    return Urls.messaging() + '/registrations';
  },
  messagingRegistrationDevice: function messagingRegistrationDevice(deviceId) {
    return Urls.messagingRegistrations() + '/' + deviceId;
  },

  geo: function geo() {
    return Urls.root() + '/geo';
  },
  geoRelative: function geoRelative() {
    return Urls.geo() + '/relative';
  },
  geoPoints: function geoPoints() {
    return Urls.geo() + '/points';
  },
  geoPoint: function geoPoint(pointId) {
    return Urls.geoPoints() + '/' + pointId;
  },
  geoPointMetaData: function geoPointMetaData(pointId) {
    return Urls.geoPoint(pointId) + '/metadata';
  },
  geoCategories: function geoCategories() {
    return Urls.geo() + '/categories';
  },
  geoCategory: function geoCategory(name) {
    return Urls.geoCategories() + '/' + name;
  },
  geoClusters: function geoClusters() {
    return Urls.geo() + '/clusters';
  },
  geoClusterPoints: function geoClusterPoints(clusterId) {
    return Urls.geoClusters() + '/' + clusterId + '/points';
  },
  geoCount: function geoCount() {
    return Urls.geo() + '/count';
  },
  geoFences: function geoFences(geoFence) {
    return Urls.geo() + '/fences' + (geoFence ? '?geoFence=' + geoFence : '');
  },
  geoFence: function geoFence(action, geoFenceName) {
    return Urls.geo() + '/fence/' + action + '?geoFence=' + geoFenceName;
  },

  commerce: function commerce() {
    return Urls.root() + '/commerce/googleplay';
  },
  commerceValidate: function commerceValidate(name, productId, token) {
    return Urls.commerce() + '/validate/' + name + '/inapp/' + productId + '/purchases/' + token;
  },
  commerceSubCancel: function commerceSubCancel(name, subId, token) {
    return Urls.commerce() + '/' + name + '/subscription/' + subId + '/purchases/' + token + '/cancel';
  },
  commerceSubStatus: function commerceSubStatus(name, subId, token) {
    return Urls.commerce() + '/' + name + '/subscription/' + subId + '/purchases/' + token;
  },

  files: function files() {
    return Urls.root() + '/files';
  },
  filePath: function filePath(path) {
    return Urls.files() + '/' + path;
  },
  fileCopy: function fileCopy() {
    return Urls.files() + '/copy';
  },
  fileMove: function fileMove() {
    return Urls.files() + '/move';
  },
  fileRename: function fileRename() {
    return Urls.files() + '/rename';
  },
  filePermissions: function filePermissions() {
    return Urls.files() + '/permissions';
  },
  filePermission: function filePermission(type, url) {
    return Urls.filePermissions() + '/' + type + '/' + encodeURIComponent(url);
  },

  users: function users() {
    return Urls.root() + '/users';
  },
  userObject: function userObject(objectId) {
    return Urls.users() + '/' + objectId;
  },
  userRegister: function userRegister() {
    return Urls.users() + '/register';
  },
  userLogin: function userLogin() {
    return Urls.users() + '/login';
  },
  userLogout: function userLogout() {
    return Urls.users() + '/logout';
  },
  userRoles: function userRoles() {
    return Urls.users() + '/userroles';
  },
  userRoleOperation: function userRoleOperation(operation) {
    return Urls.users() + '/' + operation;
  },
  userClassProps: function userClassProps() {
    return Urls.users() + '/userclassprops';
  },
  userRestorePassword: function userRestorePassword(email) {
    return Urls.users() + '/restorepassword/' + encodeURIComponent(email);
  },
  userTokenCheck: function userTokenCheck(token) {
    return Urls.users() + '/isvalidusertoken/' + token;
  },
  userResendConfirmation: function userResendConfirmation(email) {
    return Urls.users() + '/resendconfirmation/' + email;
  },
  userSocial: function userSocial() {
    return Urls.users() + '/social';
  },
  userSocialOAuth: function userSocialOAuth(socialType) {
    return Urls.userSocial() + '/oauth/' + socialType.toLowerCase() + '/request_url';
  },
  userSocialLogin: function userSocialLogin(socialType) {
    return Urls.userSocial() + '/' + socialType.toLowerCase() + '/sdk/login';
  }
}; /* eslint-disable max-len */

exports.default = Urls;
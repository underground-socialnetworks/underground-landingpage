'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loginWithGooglePlusSdk = exports.loginWithGooglePlus = undefined;

var _async = require('../../request/async');

var _async2 = _interopRequireDefault(_async);

var _utils = require('../../utils');

var _utils2 = _interopRequireDefault(_utils);

var _login = require('./login');

var _request = require('./request');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var loginWithGooglePlus = exports.loginWithGooglePlus = function loginWithGooglePlus(fieldsMapping, permissions, container, stayLoggedIn, asyncHandler) {
  console.warn('Method "loginWithGooglePlus" is deprecated. and will be removed in the nearest release.\n' + 'Use method "loginWithGooglePlusSdk" instead.');

  return (0, _login.loginSocial)('GooglePlus', fieldsMapping, permissions, container, stayLoggedIn, asyncHandler);
};

var loginWithGooglePlusSdk = exports.loginWithGooglePlusSdk = function loginWithGooglePlusSdk(accessToken, fieldsMapping, stayLoggedIn) {
  _utils2.default.checkPromiseSupport();

  if (typeof accessToken !== 'string') {
    stayLoggedIn = fieldsMapping;
    fieldsMapping = accessToken;
    accessToken = null;
  }

  return new Promise(function (resolve, reject) {
    function loginRequest() {
      (0, _request.sendSocialLoginRequest)(accessToken, 'googleplus', fieldsMapping, stayLoggedIn, new _async2.default(resolve, reject));
    }

    if (accessToken || !fieldsMapping) {
      return loginRequest();
    }

    console.warn('You must pass "accessToken" as the first argument into "loginWithGooglePlusSdk(accessToken:String, fieldsMapping:Object, stayLoggedIn?:Boolean)" method');

    if (!gapi) {
      return reject(new Error('Google Plus SDK not found'));
    }

    gapi.auth.authorize({
      client_id: fieldsMapping.client_id,
      scope: 'https://www.googleapis.com/auth/plus.login'
    }, function (_ref) {
      var access_token = _ref.access_token,
          error = _ref.error;

      if (error) {
        reject(error);
      } else {
        loginRequest(accessToken = access_token);
      }
    });
  });
};
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unassignRole = exports.assignRole = undefined;
exports.getUserRoles = getUserRoles;

var _utils = require('../utils');

var _utils2 = _interopRequireDefault(_utils);

var _urls = require('../urls');

var _urls2 = _interopRequireDefault(_urls);

var _request = require('../request');

var _request2 = _interopRequireDefault(_request);

var _utils3 = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function roleHelper(identity, rolename, asyncHandler, operation) {
  if (!identity) {
    throw new Error('User identity can not be empty');
  }

  if (!rolename) {
    throw new Error('Rolename can not be empty');
  }

  var responder = _utils2.default.extractResponder(arguments);

  return _request2.default.post({
    url: _urls2.default.userRoleOperation(operation),
    isAsync: !!responder,
    asyncHandler: responder,
    data: { user: identity, roleName: rolename }
  });
}

function getUserRoles() /** async */{
  var responder = _utils2.default.extractResponder(arguments);
  var isAsync = !!responder;

  var result = _request2.default.get({
    url: _urls2.default.userRoles(),
    isAsync: isAsync,
    asyncHandler: responder
  });

  return isAsync ? result : (0, _utils3.parseResponse)(result);
}

var assignRole = exports.assignRole = function assignRole(identity, rolename, asyncHandler) {
  return roleHelper(identity, rolename, asyncHandler, 'assignRole');
};

var unassignRole = exports.unassignRole = function unassignRole(identity, rolename, asyncHandler) {
  return roleHelper(identity, rolename, asyncHandler, 'unassignRole');
};
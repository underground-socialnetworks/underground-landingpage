'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _desc, _value, _class;

var _utils = require('../utils');

var _utils2 = _interopRequireDefault(_utils);

var _rt = require('../rt');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

var ListenerTypes = _utils2.default.mirrorKeys({
  CHANGES: null,
  CLEARED: null,
  INVOKE: null
});

var RemoteSharedObject = (_dec = (0, _rt.disallowInBusinessLogic)('SharedObject.addChangesListener'), _dec2 = _rt.RTScopeConnector.connectionRequired(), _dec3 = _rt.RTScopeConnector.connectionRequired(), _dec4 = (0, _rt.disallowInBusinessLogic)('SharedObject.addClearListener'), _dec5 = _rt.RTScopeConnector.connectionRequired(), _dec6 = _rt.RTScopeConnector.connectionRequired(), _dec7 = (0, _rt.disallowInBusinessLogic)('SharedObject.addCommandListener'), _dec8 = (0, _rt.disallowInBusinessLogic)('SharedObject.addUserStatusListener'), _dec9 = _rt.RTScopeConnector.connectionRequired(true), _dec10 = _rt.RTScopeConnector.connectionRequired(true), _dec11 = _rt.RTScopeConnector.connectionRequired(true), _dec12 = _rt.RTScopeConnector.connectionRequired(true), _dec13 = _rt.RTScopeConnector.connectionRequired(true), (_class = function (_RTScopeConnector) {
  _inherits(RemoteSharedObject, _RTScopeConnector);

  _createClass(RemoteSharedObject, [{
    key: 'connectSubscriber',
    get: function get() {
      return _rt.RTClient.subscriptions.connectToRSO;
    }
  }, {
    key: 'usersSubscriber',
    get: function get() {
      return _rt.RTClient.subscriptions.onRSOUserStatus;
    }
  }, {
    key: 'commandSubscriber',
    get: function get() {
      return _rt.RTClient.subscriptions.onRSOCommand;
    }
  }, {
    key: 'commandSender',
    get: function get() {
      return _rt.RTClient.methods.sendRSOCommand;
    }
  }], [{
    key: 'connect',
    value: function connect(name) {
      return new this({ name: name });
    }
  }]);

  function RemoteSharedObject(options) {
    _classCallCheck(this, RemoteSharedObject);

    var _this = _possibleConstructorReturn(this, (RemoteSharedObject.__proto__ || Object.getPrototypeOf(RemoteSharedObject)).call(this, options));

    _this.onInvoke = function (_ref) {
      var _this$invocationTarge;

      var method = _ref.method,
          args = _ref.args;

      checkInvocationTargetMethod(_this.invocationTarget, method);

      (_this$invocationTarge = _this.invocationTarget)[method].apply(_this$invocationTarge, _toConsumableArray(args));
    };

    _this.invocationTarget = null;
    return _this;
  }

  _createClass(RemoteSharedObject, [{
    key: 'setInvocationTarget',
    value: function setInvocationTarget(invocationTarget) {
      (0, _rt.checkUsesInBusinessLogic)('SharedObject.setInvocationTarget');

      this.invocationTarget = invocationTarget;
    }
  }, {
    key: 'subscribeOnRemoteInvokes',
    value: function subscribeOnRemoteInvokes() {
      var isAllowToSubscribeOnRemoteInvoke = false;

      try {
        (0, _rt.checkUsesInBusinessLogic)('Remote Invoke');

        isAllowToSubscribeOnRemoteInvoke = true;
      } catch (e) {
        // Remote Invoke is not supported in Business Logic
      }

      if (isAllowToSubscribeOnRemoteInvoke && !this.subscribedOnRemoteInvokes) {
        this.subscribedOnRemoteInvokes = true;

        this.addSubscription(ListenerTypes.INVOKE, _rt.RTClient.subscriptions.onRSOInvoke, {
          callback: this.onInvoke
        });
      }
    }
  }, {
    key: 'onConnect',
    value: function onConnect() {
      _get(RemoteSharedObject.prototype.__proto__ || Object.getPrototypeOf(RemoteSharedObject.prototype), 'onConnect', this).apply(this, arguments);

      this.subscribeOnRemoteInvokes();
    }
  }, {
    key: 'onDisconnect',
    value: function onDisconnect() {
      this.subscribedOnRemoteInvokes = false;
      this.stopSubscription(ListenerTypes.INVOKE, { callback: this.onInvoke });

      _get(RemoteSharedObject.prototype.__proto__ || Object.getPrototypeOf(RemoteSharedObject.prototype), 'onDisconnect', this).apply(this, arguments);
    }
  }, {
    key: 'addChangesListener',
    value: function addChangesListener(callback, onError) {
      this.addSubscription(ListenerTypes.CHANGES, _rt.RTClient.subscriptions.onRSOChanges, {
        callback: callback,
        onError: onError
      });
    }
  }, {
    key: 'removeChangesListeners',
    value: function removeChangesListeners(callback) {
      this.stopSubscription(ListenerTypes.CHANGES, { callback: callback });
    }
  }, {
    key: 'addClearListener',
    value: function addClearListener(callback, onError) {
      this.addSubscription(ListenerTypes.CLEARED, _rt.RTClient.subscriptions.onRSOClear, {
        callback: callback,
        onError: onError
      });
    }
  }, {
    key: 'removeClearListeners',
    value: function removeClearListeners(callback) {
      this.stopSubscription(ListenerTypes.CLEARED, { callback: callback });
    }
  }, {
    key: 'addCommandListener',
    value: function addCommandListener() {
      return _get(RemoteSharedObject.prototype.__proto__ || Object.getPrototypeOf(RemoteSharedObject.prototype), 'addCommandListener', this).apply(this, arguments);
    }
  }, {
    key: 'addUserStatusListener',
    value: function addUserStatusListener() {
      return _get(RemoteSharedObject.prototype.__proto__ || Object.getPrototypeOf(RemoteSharedObject.prototype), 'addUserStatusListener', this).apply(this, arguments);
    }
  }, {
    key: 'get',
    value: function get(key) {
      return _rt.RTClient.methods.getRSO(_extends({}, this.getScopeOptions(), { key: key }));
    }
  }, {
    key: 'set',
    value: function set(key, data) {
      return _rt.RTClient.methods.setRSO(_extends({}, this.getScopeOptions(), { key: key, data: data }));
    }
  }, {
    key: 'clear',
    value: function clear() {
      return _rt.RTClient.methods.clearRSO(this.getScopeOptions());
    }
  }, {
    key: 'invoke',
    value: function invoke(method) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return this.invokeOn.apply(this, [method, undefined].concat(args));
    }
  }, {
    key: 'invokeOn',
    value: function invokeOn(method, targets) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      var _this2 = this;

      return Promise.resolve().then(function () {
        return checkInvocationTargetMethod(_this2.invocationTarget, method);
      }).then(function () {
        return _rt.RTClient.methods.invokeRSOMethod(_extends({}, _this2.getScopeOptions(), { method: method, targets: targets, args: args }));
      });
    }
  }]);

  return RemoteSharedObject;
}(_rt.RTScopeConnector), (_applyDecoratedDescriptor(_class.prototype, 'addChangesListener', [_dec, _dec2], Object.getOwnPropertyDescriptor(_class.prototype, 'addChangesListener'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'removeChangesListeners', [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, 'removeChangesListeners'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'addClearListener', [_dec4, _dec5], Object.getOwnPropertyDescriptor(_class.prototype, 'addClearListener'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'removeClearListeners', [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, 'removeClearListeners'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'addCommandListener', [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, 'addCommandListener'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'addUserStatusListener', [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, 'addUserStatusListener'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'get', [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, 'get'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'set', [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, 'set'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'clear', [_dec11], Object.getOwnPropertyDescriptor(_class.prototype, 'clear'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'invoke', [_dec12], Object.getOwnPropertyDescriptor(_class.prototype, 'invoke'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'invokeOn', [_dec13], Object.getOwnPropertyDescriptor(_class.prototype, 'invokeOn'), _class.prototype)), _class));
exports.default = RemoteSharedObject;


function checkInvocationTargetMethod(invocationTarget, method) {
  if (!invocationTarget) {
    throw new Error('"invocationTarget" is not specified');
  }

  if (typeof invocationTarget[method] !== 'function') {
    throw new Error('Method "' + method + '" of invocationTarget is not function');
  }
}
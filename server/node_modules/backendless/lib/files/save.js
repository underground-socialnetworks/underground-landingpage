'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.saveFile = saveFile;

var _utils = require('../utils');

var _utils2 = _interopRequireDefault(_utils);

var _async = require('../request/async');

var _async2 = _interopRequireDefault(_async);

var _send = require('./send');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MAX_CONTENT_SIZE = 2800000;

var toByteArray = function toByteArray(content) {
  if (typeof Blob !== 'undefined') {

    if (!Array.isArray(content)) {
      content = [content];
    }

    content = new Blob(content);
  } else if (typeof Buffer !== 'undefined') {
    var value = Buffer.from(content);

    content = {
      value: value,
      options: {
        filename: 'blob',
        knownLength: value.byteLength,
        contentType: 'application/octet-stream'
      }
    };
  }

  return content;
};

var getContentSize = function getContentSize(content) {
  if (content.size) {
    return content.size;
  }

  return content.options && content.options.knownLength;
};

/**
 * @param {String} path
 * @param {String} fileName
 * @param {String|Uint8Array} fileContent
 * @param {Boolean} overwrite
 * @param {Async} asyncHandler
 * @returns {Promise.<String>}
 */
function saveFile(path, fileName, fileContent, overwrite, asyncHandler) {
  if (!path || !_utils2.default.isString(path)) {
    throw new Error('Missing value for the "path" argument. The argument must contain a string value');
  }

  if (!fileName || !_utils2.default.isString(fileName)) {
    throw new Error('Missing value for the "fileName" argument. The argument must contain a string value');
  }

  if (overwrite instanceof _async2.default) {
    asyncHandler = overwrite;
    overwrite = undefined;
  }

  fileContent = toByteArray(fileContent);

  if (getContentSize(fileContent) > MAX_CONTENT_SIZE) {
    throw new Error('File Content size must be less than ' + MAX_CONTENT_SIZE + ' bytes');
  }

  return (0, _send.sendFile)({
    overwrite: overwrite,
    path: path,
    fileName: fileName,
    file: fileContent,
    asyncHandler: asyncHandler
  });
}
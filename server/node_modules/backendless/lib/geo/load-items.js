'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.loadItems = loadItems;

var _utils = require('../utils');

var _utils2 = _interopRequireDefault(_utils);

var _request = require('../request');

var _request2 = _interopRequireDefault(_request);

var _cluster = require('./cluster');

var _cluster2 = _interopRequireDefault(_cluster);

var _point = require('./point');

var _point2 = _interopRequireDefault(_point);

var _queryValidator = require('./query-validator');

var _queryParams = require('./query-params');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//TODO: refactor me

function loadItems(query, asyncHandler) {
  (0, _queryValidator.validateQueryObject)(query);

  var url = query.url + (query.searchRectangle ? '/rect' : '/points') + '?' + (0, _queryParams.toQueryParams)(query);

  if (asyncHandler) {
    asyncHandler = _utils2.default.wrapAsync(asyncHandler, function (resp) {
      return responseParser(resp, query);
    });
  }

  var result = _request2.default.get({
    url: url,
    isAsync: !!asyncHandler,
    asyncHandler: asyncHandler
  });

  if (asyncHandler) {
    return result;
  }

  return responseParser(result, query);
}

function responseParser(resp, geoQuery) {
  return resp.map(function (geoObject) {
    var GeoItem = geoObject.hasOwnProperty('totalPoints') ? _cluster2.default : _point2.default;

    return new GeoItem(_extends({}, geoObject, { geoQuery: geoQuery }));
  });
}
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getClusterPoints = getClusterPoints;

var _urls = require('../urls');

var _urls2 = _interopRequireDefault(_urls);

var _request = require('../request');

var _request2 = _interopRequireDefault(_request);

var _async = require('../request/async');

var _async2 = _interopRequireDefault(_async);

var _cluster = require('./cluster');

var _cluster2 = _interopRequireDefault(_cluster);

var _point = require('./point');

var _point2 = _interopRequireDefault(_point);

var _query = require('./query');

var _query2 = _interopRequireDefault(_query);

var _findHelpers = require('./find-helpers');

var _findHelpers2 = _interopRequireDefault(_findHelpers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getClusterPoints(geoObject, asyncHandler) {
  if (!geoObject.objectId || !(geoObject instanceof _cluster2.default)) {
    throw new Error('Method argument must be a valid instance of GeoCluster persisted on the server');
  }

  if (!(geoObject.geoQuery instanceof _query2.default)) {
    throw new Error('Invalid GeoCluster object. ' + 'Make sure to obtain an instance of GeoCluster using the Backendless.Geo.find API');
  }

  var url = _urls2.default.geoClusterPoints(geoObject.objectId) + '?';

  var geoQuery = geoObject.geoQuery;

  for (var prop in geoQuery) {
    if (geoQuery.hasOwnProperty(prop) && _findHelpers2.default.hasOwnProperty(prop) && geoQuery[prop] != null) {
      url += '&' + _findHelpers2.default[prop](geoQuery[prop]);
    }
  }

  var responderOverride = function responderOverride(asyncHandler) {
    var success = function success(geoCollection) {
      for (var i = 0; i < geoCollection.length; i++) {
        geoCollection[i] = new _point2.default(geoCollection[i]);
      }

      asyncHandler.success(geoCollection);
    };

    var error = function error(data) {
      return asyncHandler.fault(data);
    };

    return new _async2.default(success, error);
  };

  asyncHandler = responderOverride(asyncHandler);

  return _request2.default.get({
    url: url,
    isAsync: !!asyncHandler,
    asyncHandler: asyncHandler
  });
}
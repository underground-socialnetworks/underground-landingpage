'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateRTUserTokenIfNeeded = exports.initRTClient = exports.setRTDebugMode = exports.disallowInBusinessLogic = exports.checkUsesInBusinessLogic = exports.RTClient = exports.RTScopeConnector = exports.RTListeners = undefined;

var _backendlessRtClient = require('backendless-rt-client');

var _backendlessRtClient2 = _interopRequireDefault(_backendlessRtClient);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var _localVars = require('./local-vars');

var _localVars2 = _interopRequireDefault(_localVars);

var _currentUser = require('./users/current-user');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var rtClient = null;
var rtClientId = _utils2.default.uuid();

var RTListeners = exports.RTListeners = _backendlessRtClient2.default.Listeners;
var RTScopeConnector = exports.RTScopeConnector = _backendlessRtClient2.default.ScopeConnector;

var RTClient = exports.RTClient = {

  get subscriptions() {
    return rtClient.subscriptions;
  },

  get methods() {
    return rtClient.methods;
  }
};

var checkUsesInBusinessLogic = exports.checkUsesInBusinessLogic = function checkUsesInBusinessLogic(target) {
  if (_localVars2.default.ServerCode) {
    // temporarily disable this limitation
    // throw new Error(`"${target}" is not supported inside Business Logic.`)
  }
};

var disallowInBusinessLogic = exports.disallowInBusinessLogic = function disallowInBusinessLogic(target) {
  return function (object, method, description) {
    var native = description.value;

    description.value = function () {
      checkUsesInBusinessLogic(target);

      return native.apply(this, arguments);
    };

    return description;
  };
};

var setRTDebugMode = exports.setRTDebugMode = function setRTDebugMode(debugMode) {
  if (rtClient) {
    rtClient.setConfig({ debugMode: debugMode });
  }
};

var initRTClient = exports.initRTClient = function initRTClient() {
  if (rtClient) {
    rtClient.terminate();
  }

  rtClient = new _backendlessRtClient2.default({
    appId: _localVars2.default.applicationId,
    lookupPath: _localVars2.default.appPath + '/rt/lookup',
    debugMode: _localVars2.default.debugMode,
    connectQuery: function connectQuery() {
      return {
        apiKey: _localVars2.default.secretKey,
        userToken: (0, _currentUser.getCurrentUserToken)(),
        clientId: rtClientId
      };
    }
  });
};

var updateRTUserTokenIfNeeded = exports.updateRTUserTokenIfNeeded = function updateRTUserTokenIfNeeded() {
  if (rtClient.session) {
    rtClient.methods.setUserToken({ userToken: (0, _currentUser.getCurrentUserToken)() });
  }
};

var ensureRTClient = function ensureRTClient(method) {
  return function () {
    if (rtClient) {
      var _rtClient;

      (_rtClient = rtClient)[method].apply(_rtClient, arguments);
    }
  };
};

var RT = {
  connect: ensureRTClient('connect'),
  disconnect: ensureRTClient('disconnect'),

  addConnectEventListener: ensureRTClient('addConnectEventListener'),
  removeConnectEventListener: ensureRTClient('removeConnectEventListener'),

  addConnectErrorEventListener: ensureRTClient('addConnectErrorEventListener'),
  removeConnectErrorEventListener: ensureRTClient('removeConnectErrorEventListener'),

  addDisconnectEventListener: ensureRTClient('addDisconnectEventListener'),
  removeDisconnectEventListener: ensureRTClient('removeDisconnectEventListener'),

  addReconnectAttemptEventListener: ensureRTClient('addReconnectAttemptEventListener'),
  removeReconnectAttemptEventListener: ensureRTClient('removeReconnectAttemptEventListener'),

  removeConnectionListeners: ensureRTClient('removeConnectionListeners')
};

exports.default = RT;
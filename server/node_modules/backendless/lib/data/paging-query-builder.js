'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PAGING_DEFAULTS = {
  pageSize: 10,
  offset: 0
};

var DataPagingQueryBuilder = function () {
  function DataPagingQueryBuilder() {
    _classCallCheck(this, DataPagingQueryBuilder);

    this.offset = PAGING_DEFAULTS.offset;
    this.pageSize = PAGING_DEFAULTS.pageSize;
  }

  _createClass(DataPagingQueryBuilder, [{
    key: 'setPageSize',
    value: function setPageSize(pageSize) {
      if (pageSize <= 0) {
        return 'Page size must be a positive value.';
      }

      this.pageSize = pageSize;

      return this;
    }
  }, {
    key: 'setOffset',
    value: function setOffset(offset) {
      if (offset < 0) {
        throw new Error('Offset cannot have a negative value.');
      }

      this.offset = offset;

      return this;
    }
  }, {
    key: 'prepareNextPage',
    value: function prepareNextPage() {
      this.setOffset(this.offset + this.pageSize);

      return this;
    }
  }, {
    key: 'preparePreviousPage',
    value: function preparePreviousPage() {
      var newOffset = this.offset > this.pageSize ? this.offset - this.pageSize : 0;

      this.setOffset(newOffset);

      return this;
    }
  }, {
    key: 'build',
    value: function build() {
      return {
        pageSize: this.pageSize,
        offset: this.offset
      };
    }
  }]);

  return DataPagingQueryBuilder;
}();

exports.default = DataPagingQueryBuilder;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.replCircDeps = replCircDeps;
exports.save = save;

var _utils = require('../../utils');

var _utils2 = _interopRequireDefault(_utils);

var _urls = require('../../urls');

var _urls2 = _interopRequireDefault(_urls);

var _request = require('../../request');

var _request2 = _interopRequireDefault(_request);

var _parse = require('./parse');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var genID = function genID() {
  //TODO: refactor me
  var b = '';

  for (var a = b; a++ < 36; b += a * 51 && 52 ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16) : '-') {}

  return b;
};

function replCircDeps(object) {
  var objMap = [object];
  var pos = void 0;

  var _replCircDepsHelper = function _replCircDepsHelper(obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop) && _typeof(obj[prop]) === 'object' && obj[prop] != null) {
        if ((pos = objMap.indexOf(obj[prop])) !== -1) {
          objMap[pos]['__subID'] = objMap[pos]['__subID'] || genID();
          obj[prop] = { '__originSubID': objMap[pos]['__subID'] };
        } else if (_utils2.default.isDate(obj[prop])) {
          obj[prop] = obj[prop].getTime();
        } else {
          objMap.push(obj[prop]);
          _replCircDepsHelper(obj[prop]);
        }
      }
    }
  };

  _replCircDepsHelper(object);
}

function save(obj, asyncHandler) {
  var _this = this;

  replCircDeps(obj);

  var objRef = obj;

  if (asyncHandler) {
    asyncHandler = _utils2.default.wrapAsync(asyncHandler, function (resp) {
      return (0, _parse.parseFindResponse)(resp, _this.model);
    });
  }

  var result = _request2.default.put({
    url: _urls2.default.dataTable(this.className),
    data: obj,
    isAsync: !!asyncHandler,
    asyncHandler: asyncHandler
  });

  if (asyncHandler) {
    return result;
  }

  return _utils2.default.deepExtend(objRef, (0, _parse.parseFindResponse)(result, this.model));
}
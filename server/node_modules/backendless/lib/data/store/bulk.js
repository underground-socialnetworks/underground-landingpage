'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bulkCreate = bulkCreate;
exports.bulkUpdate = bulkUpdate;
exports.bulkDelete = bulkDelete;

var _utils = require('../../utils');

var _utils2 = _interopRequireDefault(_utils);

var _urls = require('../../urls');

var _urls2 = _interopRequireDefault(_urls);

var _request = require('../../request');

var _request2 = _interopRequireDefault(_request);

var _async = require('../../request/async');

var _async2 = _interopRequireDefault(_async);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function bulkCreate(objects, asyncHandler) {
  var MSG_ERROR = 'Invalid bulkCreate argument. ' + 'The first argument must contain only array of objects.';

  if (!_utils2.default.isArray(objects)) {
    throw new Error(MSG_ERROR);
  }

  objects.forEach(function (obj) {
    if (!_utils2.default.isObject(obj) || Array.isArray(obj)) {
      throw new Error(MSG_ERROR);
    }
  });

  return _request2.default.post({
    url: _urls2.default.dataBulkTable(this.className),
    data: objects,
    isAsync: !!asyncHandler,
    asyncHandler: asyncHandler
  });
}

function bulkUpdate(where, changes, asyncHandler) {
  if (!where || !_utils2.default.isString(where)) {
    throw new Error('Invalid bulkUpdate argument. The first argument must be "whereClause" string.');
  }

  if (!_utils2.default.isObject(changes) || Array.isArray(changes) || changes instanceof _async2.default) {
    throw new Error('Invalid bulkUpdate argument. The second argument must be object.');
  }

  return _request2.default.put({
    url: _urls2.default.dataBulkTable(this.className),
    query: { where: where },
    data: changes,
    isAsync: !!asyncHandler,
    asyncHandler: asyncHandler
  });
}

function bulkDelete(where, asyncHandler) {
  if (!_utils2.default.isArray(where) && !_utils2.default.isString(where)) {
    throw new Error('Invalid bulkDelete argument. ' + 'The first argument must contain array of objects or array of id or "whereClause" string.');
  }

  where = _utils2.default.isString(where) ? where : objectsToWhereClause(where);

  return _request2.default.delete({
    url: _urls2.default.dataBulkTable(this.className),
    query: { where: where },
    isAsync: !!asyncHandler,
    asyncHandler: asyncHandler
  });
}

function objectsToWhereClause(objects) {
  var objectIds = objects.map(function (obj) {
    if (!obj || !_utils2.default.isString(obj) && !obj.objectId) {
      throw new Error('Can not transform "objects" to "whereClause". ' + 'Item must be a string or an object with property "objectId" as string.');
    }

    return '\'' + (_utils2.default.isString(obj) ? obj : obj.objectId) + '\'';
  });

  return 'objectId in (' + objectIds.join(',') + ')';
}
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loginWithFacebookSdk = exports.loginWithFacebook = undefined;

var _async = require('../../request/async');

var _async2 = _interopRequireDefault(_async);

var _utils = require('../../utils');

var _utils2 = _interopRequireDefault(_utils);

var _login = require('./login');

var _request = require('./request');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var loginWithFacebook = exports.loginWithFacebook = function loginWithFacebook(fieldsMapping, permissions, stayLoggedIn, asyncHandler) {
  console.warn('Method "loginWithFacebook" is deprecated. and will be removed in the nearest release.\n' + 'Use method "loginWithFacebookSdk" instead.');

  return (0, _login.loginSocial)('Facebook', fieldsMapping, permissions, null, stayLoggedIn, asyncHandler);
};

var loginWithFacebookSdk = exports.loginWithFacebookSdk = function loginWithFacebookSdk(accessToken, fieldsMapping, stayLoggedIn, options) {
  _utils2.default.checkPromiseSupport();

  if (typeof accessToken !== 'string') {
    options = stayLoggedIn;
    stayLoggedIn = fieldsMapping;
    fieldsMapping = accessToken;
    accessToken = null;
  }

  return new Promise(function (resolve, reject) {
    function loginRequest() {
      (0, _request.sendSocialLoginRequest)(accessToken, 'facebook', fieldsMapping, stayLoggedIn, new _async2.default(resolve, reject));
    }

    if (accessToken || !fieldsMapping) {
      return loginRequest();
    }

    console.warn('You must pass "accessToken" as the first argument into "loginWithFacebook(accessToken:String, fieldsMapping:Object, stayLoggedIn?:Boolean)" method');

    if (!FB) {
      return reject(new Error('Facebook SDK not found'));
    }

    FB.getLoginStatus(function (response) {
      if (response.status === 'connected') {
        loginRequest(accessToken = response.authResponse.accessToken);
      } else {
        FB.login(function (response) {
          return loginRequest(accessToken = response.authResponse.accessToken);
        }, options);
      }
    });
  });
};
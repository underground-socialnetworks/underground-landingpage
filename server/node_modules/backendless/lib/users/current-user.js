'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loggedInUser = exports.getCurrentUser = undefined;
exports.setLocalCurrentUser = setLocalCurrentUser;
exports.getLocalCurrentUser = getLocalCurrentUser;
exports.getCurrentUserToken = getCurrentUserToken;
exports.isValidLogin = isValidLogin;

var _utils = require('../utils');

var _utils2 = _interopRequireDefault(_utils);

var _urls = require('../urls');

var _urls2 = _interopRequireDefault(_urls);

var _request = require('../request');

var _request2 = _interopRequireDefault(_request);

var _async = require('../request/async');

var _async2 = _interopRequireDefault(_async);

var _localCache = require('../local-cache');

var _localCache2 = _interopRequireDefault(_localCache);

var _rt = require('../rt');

var _utils3 = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var currentUser = null;

function setLocalCurrentUser(user) {
  currentUser = user || null;

  (0, _rt.updateRTUserTokenIfNeeded)();
}

function getLocalCurrentUser() {
  return currentUser;
}

function getCurrentUserToken() {
  if (currentUser && currentUser['user-token']) {
    return currentUser['user-token'] || null;
  }

  return _localCache2.default.get('user-token') || null;
}

var getCurrentUser = exports.getCurrentUser = function getCurrentUser(asyncHandler) {
  if (currentUser) {
    var userFromResponse = (0, _utils3.getUserFromResponse)(currentUser);

    return asyncHandler ? asyncHandler.success(userFromResponse) : userFromResponse;
  }

  var stayLoggedIn = _localCache2.default.get('stayLoggedIn');
  var currentUserId = stayLoggedIn && _localCache2.default.get('current-user-id');

  if (currentUserId) {
    var _require = require('../data'),
        Data = _require.default;

    var _require2 = require('./user'),
        User = _require2.default;

    return Data.of(User).findById(currentUserId, asyncHandler);
  }

  return asyncHandler ? asyncHandler.success(null) : null;
};

function isValidLogin() /** async */{
  var userToken = getCurrentUserToken();
  var responder = _utils2.default.extractResponder(arguments);
  var isAsync = !!responder;

  if (userToken) {
    if (!isAsync) {
      try {
        var result = _request2.default.get({
          url: _urls2.default.userTokenCheck(userToken)
        });
        return !!result;
      } catch (e) {
        return false;
      }
    }

    return _request2.default.get({
      url: _urls2.default.userTokenCheck(userToken),
      isAsync: isAsync,
      asyncHandler: responder
    });
  }

  if (!isAsync) {
    return !!getCurrentUser();
  }

  getCurrentUser(new _async2.default(function (user) {
    return responder.success(!!user);
  }, function () {
    return responder.success(false);
  }));
}

var loggedInUser = exports.loggedInUser = function loggedInUser() {
  return _localCache2.default.get('current-user-id');
};